{"version":3,"sources":["../src/StackTraceItem.js"],"names":["StackTraceItem","constructor","item","sourceMapping","fileName","lineNumber","columnNumber","functionName","typeName","methodName","native","file","compiledFileName","compiledLineNumber","compiledColumnNumber","startsWith","current","realFileName","source","substr","length","realCompiledFileName","getFileName","getLineNumber","line","getColumnNumber","column","getScriptNameOrSourceURL","toString","str","fullPath","compiledPath"],"mappings":"AAAA,eAAe,MAAMA,cAAN,CAAqB;AAClCC,cAAYC,IAAZ,EAAkBC,aAAlB,EAAiC;AAC/B,SAAKC,QAAL,GAAgBF,KAAKE,QAArB;AACA,SAAKC,UAAL,GAAkBH,KAAKG,UAAvB;AACA,SAAKC,YAAL,GAAoBJ,KAAKI,YAAzB;AACA,SAAKC,YAAL,GAAoBL,KAAKK,YAAzB;AACA,SAAKC,QAAL,GAAgBN,KAAKM,QAArB;AACA,SAAKC,UAAL,GAAkBP,KAAKO,UAAvB;AACA,SAAKC,MAAL,GAAcR,KAAKQ,MAAnB;AACA,SAAKC,IAAL,GAAYT,KAAKS,IAAjB;;AAEA,SAAKC,gBAAL,GAAwBV,KAAKU,gBAA7B;AACA,SAAKC,kBAAL,GAA0BX,KAAKW,kBAA/B;AACA,SAAKC,oBAAL,GAA4BZ,KAAKY,oBAAjC;;AAEA,QAAIX,iBAAiBD,KAAKE,QAAtB,IAAkCF,KAAKE,QAAL,CAAcW,UAAd,CAAyBZ,cAAca,OAAvC,CAAtC,EAAuF;AACrF,WAAKC,YAAL,GAAoBd,cAAce,MAAd,GACYhB,KAAKE,QAAL,CAAce,MAAd,CAAqBhB,cAAca,OAAd,CAAsBI,MAA3C,CADhC;AAEA,UAAI,KAAKR,gBAAT,EAA2B;AACzB,aAAKS,oBAAL,GAA4BlB,cAAce,MAAd,GACEhB,KAAKE,QAAL,CAAce,MAAd,CAAqBhB,cAAca,OAAd,CAAsBI,MAA3C,CAD9B;AAED;AACF,KAPD,MAOO;AACL,WAAKH,YAAL,GAAoBf,KAAKE,QAAzB;AACA,WAAKiB,oBAAL,GAA4BnB,KAAKU,gBAAjC;AACD;AACF;;AAEDU,gBAAc;AACZ,WAAO,KAAKlB,QAAZ;AACD;;AAEDmB,kBAAgB;AACd,WAAO,KAAKC,IAAZ;AACD;;AAEDC,oBAAkB;AAChB,WAAO,KAAKC,MAAL,GAAc,CAArB;AACD;;AAEDC,6BAA2B;AACzB,WAAO,KAAKvB,QAAZ;AACD;;AAEDwB,aAAW;AACT,QAAIC,MAAM,SAAV;AACA,QAAI,KAAKtB,YAAT,EAAuB;AACrBsB,aAAO,KAAKtB,YAAZ;AACD,KAFD,MAEO,IAAI,KAAKC,QAAT,EAAmB;AACxBqB,aAAQ,IAAE,KAAKrB,QAAS,MAAG,KAAKC,UAAL,IAAmB,aAAc,GAA5D;AACD;;AAED,QAAI,KAAKC,MAAT,EAAiB;AACfmB,aAAO,WAAP;AACD,KAFD,MAEO;AACL,UAAMC,WAAY,IAAE,KAAKb,YAAa,MAAG,KAAKZ,UAAW,MAAG,KAAKC,YAAa,GAA9E;AACA,UAAI,KAAKC,YAAL,IAAqB,KAAKC,QAA9B,EAAwC;AACtCqB,eAAQ,MAAIC,QAAS,IAArB;AACD,OAFD,MAEO;AACLD,eAAOC,QAAP;AACD;;AAED,UAAI,KAAKlB,gBAAL,IAAyB,KAAKA,gBAAL,KAA0B,KAAKK,YAA5D,EAA0E;AACxE,YAAMc,eACH,IAAE,KAAKnB,gBAAiB,MAAG,KAAKC,kBAAmB,MAAG,KAAKC,oBAAqB,GADnF;AAEAe,eAAQ,gBAAcE,YAAa,IAAnC;AACD;AACF;AACD,WAAOF,GAAP;AACD;AArEiC","file":"StackTraceItem.js","sourcesContent":["export default class StackTraceItem {\n  constructor(item, sourceMapping) {\n    this.fileName = item.fileName;\n    this.lineNumber = item.lineNumber;\n    this.columnNumber = item.columnNumber;\n    this.functionName = item.functionName;\n    this.typeName = item.typeName;\n    this.methodName = item.methodName;\n    this.native = item.native;\n    this.file = item.file;\n\n    this.compiledFileName = item.compiledFileName;\n    this.compiledLineNumber = item.compiledLineNumber;\n    this.compiledColumnNumber = item.compiledColumnNumber;\n\n    if (sourceMapping && item.fileName && item.fileName.startsWith(sourceMapping.current)) {\n      this.realFileName = sourceMapping.source\n                                    + item.fileName.substr(sourceMapping.current.length);\n      if (this.compiledFileName) {\n        this.realCompiledFileName = sourceMapping.source\n                                    + item.fileName.substr(sourceMapping.current.length);\n      }\n    } else {\n      this.realFileName = item.fileName;\n      this.realCompiledFileName = item.compiledFileName;\n    }\n  }\n\n  getFileName() {\n    return this.fileName;\n  }\n\n  getLineNumber() {\n    return this.line;\n  }\n\n  getColumnNumber() {\n    return this.column + 1;\n  }\n\n  getScriptNameOrSourceURL() {\n    return this.fileName;\n  }\n\n  toString() {\n    let str = '    at ';\n    if (this.functionName) {\n      str += this.functionName;\n    } else if (this.typeName) {\n      str += `${this.typeName}.${this.methodName || '<anonymous>'}`;\n    }\n\n    if (this.native) {\n      str += ' [native]';\n    } else {\n      const fullPath = `${this.realFileName}:${this.lineNumber}:${this.columnNumber}`;\n      if (this.functionName || this.typeName) {\n        str += ` (${fullPath})`;\n      } else {\n        str += fullPath;\n      }\n\n      if (this.compiledFileName && this.compiledFileName !== this.realFileName) {\n        const compiledPath =\n          `${this.compiledFileName}:${this.compiledLineNumber}:${this.compiledColumnNumber}`;\n        str += ` (compiled= ${compiledPath})`;\n      }\n    }\n    return str;\n  }\n}\n"]}