{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"src/index.js","sourcesContent":["var stackTrace = require('stack-trace');\nvar fs = require('fs');\nvar path = require('path');\nvar sourceMap = require(\"source-map\");\n\nvar sourceMapping;\n\nclass ParsedError {\n    constructor(err) {\n        this.name = err.name;\n        this.message = err.message;\n        this.originalStack = err.stack;\n    }\n\n    toString() {\n        return this.name + ': ' + this.message + \"\\n\" + this.stack.toString();\n    }\n}\n\nclass StackTrace {\n    constructor() {\n        this.items = [];\n    }\n\n    forEach() {\n        return this.items.forEach.apply(this.items, arguments);\n    }\n\n    toString() {\n        var str = '';\n        this.render(function(string) {\n            str += string + \"\\n\";\n        });\n        return str;\n    }\n\n    render(log) {\n        this.forEach((line) => {\n            line.render(log);\n        });\n    }\n}\n\n\nclass StackTraceItem {\n    constructor(item) {\n        this.fileName = item.fileName;\n        this.lineNumber = item.lineNumber;\n        this.columnNumber = item.columnNumber;\n        this.typeName = item.typeName;\n        this.methodName = item.methodName;\n        this.native = item.native;\n        this.file = item.file;\n\n        this.compiledFileName = item.compiledFileName;\n        this.compiledLineNumber = item.compiledLineNumber;\n        this.compiledColumnNumber = item.compiledColumnNumber;\n\n        if (sourceMapping && item.fileName && item.fileName.startsWith(sourceMapping.current)) {\n            this.realFileName = sourceMapping.source\n                                    + item.fileName.substr(sourceMapping.current.length);\n            if (this.compiledFileName) {\n                this.realCompiledFileName = sourceMapping.source\n                                    + item.fileName.substr(sourceMapping.current.length);\n            }\n        } else {\n            this.realFileName = item.fileName;\n            this.realCompiledFileName = item.compiledFileName;\n        }\n    }\n\n    getFileName() {\n        return this.fileName;\n    }\n    getLineNumber() {\n        return this.line;\n    }\n    getColumnNumber() {\n        return this.column + 1;\n    }\n    getScriptNameOrSourceURL() {\n        return this.fileName;\n    }\n\n    render(log) {\n        var fullPath = this.realFileName + ':' + this.lineNumber + ':' + this.columnNumber;\n        var compiledPath = this.compiledFileName && this.compiledFileName !== this.realFileName ?\n                    this.compiledFileName + ':' + this.compiledLineNumber + ':' + this.compiledColumnNumber\n                    : null;\n        log(\n            '    at '\n             + ( this.methodName || this.typeName ? (this.typeName && this.typeName + '.')\n             + (this.methodName || '<anonymous>')\n             + ' (' + fullPath + ')' : fullPath)\n             + (compiledPath ? ' (compiled= ' + compiledPath + ')' : '')\n        );\n        //line.native\n    }\n}\n\n\n\n/**\n * Set path mapping, for instance when you have a vm or docker\n *\n * @param {String} currentPath\n * @param {String} sourcePath\n */\nexport function setPathMapping(currentPath, sourcePath) {\n    sourceMapping = Object.freeze({ current: currentPath, source: sourcePath });\n}\n\n/**\n * Parse an error and extract its stack trace\n * @param  {Error} err\n * @return {ParsedError}\n */\nexport function parse(err) {\n    var parsedError = new ParsedError(err);\n    parsedError.stack = exports.parseErrorStack(err);\n    return parsedError;\n}\n\n/**\n * Parse an error and extract its stack trace\n * @param  {Error} err\n * @return {StackTrace}\n */\nexport function parseErrorStack(err) {\n    var finalStack = new StackTrace();\n    var stack = stackTrace.parse(err);\n\n    var files = new Map();\n    stack.forEach((line) => {\n        if (!line.fileName || files.has(line.fileName)) {\n            return;\n        }\n        files.set(line.fileName, {});\n    });\n\n    files.forEach((file, fileName) => {\n        if (fileName.startsWith('/')) {\n            try {\n                var fileNameMap = fileName + '.map';\n                var fileContent = fs.readFileSync(fileName).toString();\n                var match = /\\/\\/[#@]\\s*sourceMappingURL=(.*)\\s*$/m.exec(fileContent);\n                if (match && match[1] && match[1][0] === '/') {\n                    fileNameMap = match[1];\n                }\n                var contents = fs.readFileSync(fileNameMap).toString();\n                file.map = new sourceMap.SourceMapConsumer(contents);\n                var sourceRoot = !file.map.sourceRoot ? '' : path.resolve(path.dirname(fileName), file.map.sourceRoot);\n                file.sourceFileName = sourceRoot + file.map.file;\n                if (file.map.sourcesContent) {\n                    var sourceIndex = file.map.sources.indexOf(file.map.file);\n                    file.contents = sourceIndex !== -1 && file.map.sourcesContent[sourceIndex];\n                }\n                if (!file.contents) {\n                    if (sourceRoot.slice(-1) !== '/') {\n                        sourceRoot += '/';\n                    }\n                    file.contents = fs.readFileSync(file.sourceFileName).toString();\n                }\n                // TODO lazy loading\n                //, path.resolve(file.map.sourceRoot, original.source)\n            } catch(e) {\n                // console.log(e.stack);\n            }\n        }\n    });\n\n    stack.forEach((line) => {\n        var file = files.get(line.fileName);\n        if (file && file.map) {\n            var original = file.map.originalPositionFor({ line: line.lineNumber, column: line.columnNumber });\n            if (original.source) {\n                //, path.resolve(file.map.sourceRoot, original.source)\n                line.compiledFileName = line.fileName;\n                line.compiledLineNumber = line.lineNumber;\n                line.compiledColumnNumber = line.columnNumber;\n\n                line.fileName = file.sourceFileName;\n                line.lineNumber = original.line;\n                line.columnNumber = original.column;\n                if (original.name) {\n                    line.methodName = original.name;\n                }\n            }\n            line.file = file;\n\n        }\n        finalStack.items.push(new StackTraceItem(line));\n    });\n\n    return finalStack;\n}\n\n\n/**\n * Parse then log an error with logger.error\n * @param  {Error} err\n */\nexport function log(err) {\n    /* global logger */\n    if (typeof err !== 'object') {\n        (global.logger && logger.error || console.error)(err.message || err);\n    } else {\n        var parsedError = exports.parse(err);\n        (global.logger && logger.error || console.error)(parsedError.toString());\n    }\n}\n"]}