{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["const stackTrace = require('stack-trace');\nconst fs = require('fs');\nconst path = require('path');\nconst sourceMap = require('source-map');\nimport ParsedError from './ParsedError';\nimport StackTrace from './StackTrace';\nimport StackTraceItem from './StackTraceItem';\n\nlet sourceMapping;\n\n/**\n * Set path mapping, for instance when you have a vm or docker\n *\n * @param {String} currentPath\n * @param {String} sourcePath\n */\nexport function setPathMapping(currentPath, sourcePath) {\n    sourceMapping = Object.freeze({ current: currentPath, source: sourcePath });\n}\n\n/**\n * Parse an error and extract its stack trace\n *\n * @param  {Error} err\n * @return {ParsedError}\n */\nexport function parse(err) {\n    let parsedError = new ParsedError(err);\n    parsedError.stack = exports.parseErrorStack(err);\n\n    if (err.previous) {\n        parsedError.previous = parse(err.previous);\n    }\n\n    return parsedError;\n}\n\n/**\n * Parse an error and extract its stack trace\n *\n * @param  {Error} err\n * @return {StackTrace}\n */\nexport function parseErrorStack(err) {\n    let finalStack = new StackTrace();\n    let stack = stackTrace.parse(err);\n\n    const libFiles = new Map();\n    const sourceFiles = new Map();\n\n    stack.forEach((line) => {\n        const fileName = line.fileName;\n        let file;\n\n        if (fileName && fileName.startsWith('/')) {\n            if (libFiles.has(fileName)) {\n                file = libFiles.get(fileName);\n            } else {\n                file = {};\n                const dirname = path.dirname(fileName);\n                try {\n                    const fileContent = fs.readFileSync(fileName).toString();\n                    file.fileName = fileName;\n                    file.contents = fileContent;\n                    libFiles.set(fileName, file);\n\n                    try {\n                        let fileNameMap = `${fileName}.map`;\n                        const match = /\\/\\/[#@]\\s*sourceMappingURL=(.*)\\s*$/m.exec(fileContent);\n                        if (match && match[1] && match[1][0] === '/') {\n                            fileNameMap = path.resolve(dirname, match[1]);\n                        }\n\n                        const contents = fs.readFileSync(fileNameMap).toString();\n                        file.fileNameMap = fileNameMap;\n                        file.map = new sourceMap.SourceMapConsumer(contents);\n\n                        if (file.map.sourceRoot) {\n                            file.sourceRoot = path.resolve(dirname, file.map.sourceRoot);\n                        } else {\n                            file.sourceRoot = path.dirname(fileName);\n                        }\n                    } catch (e) {\n                    }\n                } catch (e) {\n                    libFiles.set(fileName, file = false);\n                }\n            }\n        }\n\n        if (file && file.map) {\n            const original = file.map.originalPositionFor({ line: line.lineNumber, column: line.columnNumber });\n            let originalFile;\n\n            if (original.source) {\n                const originalFilePath = path.resolve(file.sourceRoot, original.source);\n\n                if (sourceFiles.has(originalFilePath)) {\n                    originalFile = sourceFiles.get(originalFilePath);\n                } else {\n                    originalFile = { fileName: original.source, filePath: originalFilePath };\n                    sourceFiles.set(originalFilePath, originalFile);\n\n                    if (file.map.sourcesContent) {\n                        const sourceIndex = file.map.sources.indexOf(original.source);\n                        originalFile.contents = sourceIndex !== -1 && file.map.sourcesContent[sourceIndex];\n                    }\n\n                    if (!originalFile.contents) {\n                        Object.defineProperty(originalFile, 'contents', {\n                            configurable: true,\n                            get: function get() {\n                                let contents;\n                                try {\n                                    contents = fs.readFileSync(originalFilePath).toString();\n                                } catch (err) {\n                                }\n\n                                Object.defineProperty(originalFile, 'contents', { value: contents });\n                                return contents;\n                            },\n                        });\n                    }\n                }\n\n                line.compiledFileName = line.fileName;\n                line.compiledLineNumber = line.lineNumber;\n                line.compiledColumnNumber = line.columnNumber;\n\n                line.file = originalFile;\n                line.fileName = originalFile.filePath;\n                line.lineNumber = original.line;\n                line.columnNumber = original.column;\n                if (original.name) {\n                    line.methodName = original.name;\n                }\n            }\n        }\n\n        if (!line.file && file && file.contents) {\n            line.file = {\n                fileName: file.fileName,\n                filePath: file.fileName,\n                contents: file.contents,\n            };\n        }\n\n        finalStack.items.push(new StackTraceItem(line, sourceMapping));\n    });\n\n    return finalStack;\n}\n\n/**\n * Parse then log an error with logger.error\n *\n * @param {Error} err\n */\nexport function log(err) {\n    /* global logger */\n    /* eslint-disable no-console */\n    if (typeof err !== 'object') {\n        (global.logger && logger.error || console.error)(err.message || err);\n    } else {\n        let parsedError = exports.parse(err);\n        (global.logger && logger.error || console.error)(parsedError.toString());\n    }\n}\n"]}