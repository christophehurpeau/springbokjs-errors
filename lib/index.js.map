{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["var stackTrace = require('stack-trace');\nvar fs = require('fs');\nvar path = require('path');\nvar sourceMap = require('source-map');\n\nvar sourceMapping;\n\nclass ParsedError {\n    constructor(err) {\n        this.name = err.name;\n        this.message = err.message;\n        this.originalStack = err.stack;\n    }\n\n    toString() {\n        return this.name + ': ' + this.message + '\\n' + this.stack.toString();\n    }\n}\n\nclass StackTrace {\n    constructor() {\n        this.items = [];\n    }\n\n    forEach() {\n        return this.items.forEach.apply(this.items, arguments);\n    }\n\n    toString() {\n        var str = '';\n        this.render(function(string) {\n            str += string + '\\n';\n        });\n        return str;\n    }\n\n    render(log) {\n        this.forEach((line) => {\n            line.render(log);\n        });\n    }\n}\n\nclass StackTraceItem {\n    constructor(item) {\n        this.fileName = item.fileName;\n        this.lineNumber = item.lineNumber;\n        this.columnNumber = item.columnNumber;\n        this.functionName = item.functionName;\n        this.typeName = item.typeName;\n        this.methodName = item.methodName;\n        this.native = item.native;\n        this.file = item.file;\n\n        this.compiledFileName = item.compiledFileName;\n        this.compiledLineNumber = item.compiledLineNumber;\n        this.compiledColumnNumber = item.compiledColumnNumber;\n\n        if (sourceMapping && item.fileName && item.fileName.startsWith(sourceMapping.current)) {\n            this.realFileName = sourceMapping.source\n                                    + item.fileName.substr(sourceMapping.current.length);\n            if (this.compiledFileName) {\n                this.realCompiledFileName = sourceMapping.source\n                                    + item.fileName.substr(sourceMapping.current.length);\n            }\n        } else {\n            this.realFileName = item.fileName;\n            this.realCompiledFileName = item.compiledFileName;\n        }\n    }\n\n    getFileName() {\n        return this.fileName;\n    }\n\n    getLineNumber() {\n        return this.line;\n    }\n\n    getColumnNumber() {\n        return this.column + 1;\n    }\n\n    getScriptNameOrSourceURL() {\n        return this.fileName;\n    }\n\n    render(log) {\n        let str = '    at ';\n        if (this.functionName) {\n            str += this.functionName;\n        } else if (this.typeName) {\n            str += this.typeName + '.' + (this.methodName || '<anonymous>');\n        }\n\n        if (this.native) {\n            str += ' [native]';\n        } else {\n            const fullPath = this.realFileName + ':' + this.lineNumber + ':' + this.columnNumber;\n            str += ' (' + fullPath + ')';\n\n            if (this.compiledFileName && this.compiledFileName !== this.realFileName) {\n                const compiledPath = this.compiledFileName + ':' +\n                                     this.compiledLineNumber + ':' +\n                                     this.compiledColumnNumber;\n                str += ' (compiled= ' + compiledPath + ')';\n            }\n        }\n\n        log(str);\n    }\n}\n\n/**\n * Set path mapping, for instance when you have a vm or docker\n *\n * @param {String} currentPath\n * @param {String} sourcePath\n */\nexport function setPathMapping(currentPath, sourcePath) {\n    sourceMapping = Object.freeze({ current: currentPath, source: sourcePath });\n}\n\n/**\n * Parse an error and extract its stack trace\n *\n * @param  {Error} err\n * @return {ParsedError}\n */\nexport function parse(err) {\n    var parsedError = new ParsedError(err);\n    parsedError.stack = exports.parseErrorStack(err);\n    return parsedError;\n}\n\n/**\n * Parse an error and extract its stack trace\n *\n * @param  {Error} err\n * @return {StackTrace}\n */\nexport function parseErrorStack(err) {\n    var finalStack = new StackTrace();\n    var stack = stackTrace.parse(err);\n\n    const libFiles = new Map();\n    const sourceFiles = new Map();\n\n    stack.forEach((line) => {\n        const fileName = line.fileName;\n        let file;\n\n        if (fileName && fileName.startsWith('/')) {\n            if (libFiles.has(fileName)) {\n                file = libFiles.get(fileName);\n            } else {\n                try {\n                    file = {};\n                    let fileNameMap = fileName + '.map';\n                    const fileContent = fs.readFileSync(fileName).toString();\n                    const match = /\\/\\/[#@]\\s*sourceMappingURL=(.*)\\s*$/m.exec(fileContent);\n                    if (match && match[1] && match[1][0] === '/') {\n                        fileNameMap = match[1];\n                    }\n\n                    const contents = fs.readFileSync(fileNameMap).toString();\n                    file.map = new sourceMap.SourceMapConsumer(contents);\n\n                    if (file.map.sourceRoot) {\n                        file.sourceRoot = path.resolve(path.dirname(fileName), file.map.sourceRoot);\n                    } else {\n                        file.sourceRoot = path.dirname(fileName);\n                    }\n\n                    libFiles.set(fileName, file);\n                } catch (e) {\n                    libFiles.set(fileName, file = false);\n                }\n            }\n        }\n\n        if (file && file.map) {\n            const original = file.map.originalPositionFor({ line: line.lineNumber, column: line.columnNumber });\n            let originalFile;\n\n            if (original.source) {\n                const originalFilePath = path.resolve(file.sourceRoot, original.source);\n\n                if (sourceFiles.has(originalFilePath)) {\n                    originalFile = sourceFiles.get(originalFilePath);\n                } else {\n                    originalFile = { fileName: original.source, filePath: originalFilePath };\n                    sourceFiles.set(originalFilePath, originalFile);\n\n                    if (file.map.sourcesContent) {\n                        const sourceIndex = file.map.sources.indexOf(original.source);\n                        originalFile.contents = sourceIndex !== -1 && file.map.sourcesContent[sourceIndex];\n                    }\n\n                    if (!file.contents) {\n                        Object.defineProperty(originalFile, 'contents', {\n                            configurable: true,\n                            get: function get() {\n                                let contents;\n                                try {\n                                    contents = fs.readFileSync(originalFilePath).toString();\n                                } catch (err) {}\n\n                                Object.defineProperty(originalFile, 'contents', { value: contents });\n                                return contents;\n                            },\n                        });\n                    }\n                }\n\n                line.compiledFileName = line.fileName;\n                line.compiledLineNumber = line.lineNumber;\n                line.compiledColumnNumber = line.columnNumber;\n\n                line.fileName = originalFile.filePath;\n                line.lineNumber = original.line;\n                line.columnNumber = original.column;\n                if (original.name) {\n                    line.methodName = original.name;\n                }\n            }\n\n            line.file = file;\n\n        }\n\n        finalStack.items.push(new StackTraceItem(line));\n    });\n\n    return finalStack;\n}\n\n/**\n * Parse then log an error with logger.error\n *\n * @param  {Error} err\n */\nexport function log(err) {\n    /* global logger */\n    if (typeof err !== 'object') {\n        (global.logger && logger.error || console.error)(err.message || err);\n    } else {\n        var parsedError = exports.parse(err);\n        (global.logger && logger.error || console.error)(parsedError.toString());\n    }\n}\n"]}