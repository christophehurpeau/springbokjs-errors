{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;2BAIwB,eAAe;;;;0BAChB,cAAc;;;;8BACV,kBAAkB;;;;AAN7C,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAC1C,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;;AAKxC,IAAI,aAAa,CAAC;;;;;;;;;;;AAQX,SAAS,cAAc,CAAC,WAAW,EAAE,UAAU,EAAE;AACpD,iBAAa,GAAG,eAAc,EAAE,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;CAC/E;;;;;;;;;;AAQM,SAAS,KAAK,CAAC,GAAG,EAAE;AACvB,QAAI,WAAW,GAAG,0BAAgB,GAAG,CAAC,CAAC;AACvC,eAAW,CAAC,KAAK,GAAG,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;;AAEjD,QAAI,GAAG,CAAC,QAAQ,EAAE;AACd,mBAAW,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;KAC9C;;AAED,WAAO,WAAW,CAAC;CACtB;;;;;;;;;;AAQM,SAAS,eAAe,CAAC,GAAG,EAAE;AACjC,QAAI,UAAU,GAAG,0BAAgB,CAAC;AAClC,QAAI,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;AAElC,UAAM,QAAQ,GAAG,UAAS,CAAC;AAC3B,UAAM,WAAW,GAAG,UAAS,CAAC;;AAE9B,SAAK,CAAC,OAAO,CAAC,UAAC,IAAI,EAAK;AACpB,cAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC/B,YAAI,IAAI,CAAC;;AAET,YAAI,QAAQ,IAAI,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;AACtC,gBAAI,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;AACxB,oBAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;aACjC,MAAM;AACH,oBAAI,GAAG,EAAE,CAAC;AACV,sBAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACvC,oBAAI;AACA,0BAAM,WAAW,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;AACzD,wBAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACzB,wBAAI,CAAC,QAAQ,GAAG,WAAW,CAAC;AAC5B,4BAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;;AAE7B,wBAAI;AACA,4BAAI,WAAW,GAAG,QAAQ,GAAG,MAAM,CAAC;AACpC,8BAAM,KAAK,GAAG,uCAAuC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACxE,4BAAI,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;AAC1C,uCAAW,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;yBACjD;;AAED,8BAAM,QAAQ,GAAG,EAAE,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,QAAQ,EAAE,CAAC;AACzD,4BAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AAC/B,4BAAI,CAAC,GAAG,GAAG,IAAI,SAAS,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;;AAErD,4BAAI,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE;AACrB,gCAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;yBAChE,MAAM;AACH,gCAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;yBAC5C;qBACJ,CAAC,OAAO,CAAC,EAAE,EACX;iBACJ,CAAC,OAAO,CAAC,EAAE;AACR,4BAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,GAAG,KAAK,CAAC,CAAC;iBACxC;aACJ;SACJ;;AAED,YAAI,IAAI,IAAI,IAAI,CAAC,GAAG,EAAE;AAClB,kBAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;AACpG,gBAAI,YAAY,CAAC;;AAEjB,gBAAI,QAAQ,CAAC,MAAM,EAAE;AACjB,sBAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;;AAExE,oBAAI,WAAW,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE;AACnC,gCAAY,GAAG,WAAW,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;iBACpD,MAAM;AACH,gCAAY,GAAG,EAAE,QAAQ,EAAE,QAAQ,CAAC,MAAM,EAAE,QAAQ,EAAE,gBAAgB,EAAE,CAAC;AACzE,+BAAW,CAAC,GAAG,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;;AAEhD,wBAAI,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE;AACzB,8BAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC9D,oCAAY,CAAC,QAAQ,GAAG,WAAW,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;qBACtF;;AAED,wBAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;AACxB,8BAAM,CAAC,cAAc,CAAC,YAAY,EAAE,UAAU,EAAE;AAC5C,wCAAY,EAAE,IAAI;AAClB,+BAAG,kBAAE,SAAS,GAAG,GAAG;AAChB,oCAAI,QAAQ,CAAC;AACb,oCAAI;AACA,4CAAQ,GAAG,EAAE,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC,QAAQ,EAAE,CAAC;iCAC3D,CAAC,OAAO,GAAG,EAAE,EACb;;AAED,sCAAM,CAAC,cAAc,CAAC,YAAY,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;AACrE,uCAAO,QAAQ,CAAC;6BACnB;yBACJ,CAAC,CAAC;qBACN;iBACJ;;AAED,oBAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC;AACtC,oBAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,UAAU,CAAC;AAC1C,oBAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,YAAY,CAAC;;AAE9C,oBAAI,CAAC,IAAI,GAAG,YAAY,CAAC;AACzB,oBAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;AACtC,oBAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC;AAChC,oBAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC;AACpC,oBAAI,QAAQ,CAAC,IAAI,EAAE;AACf,wBAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC;iBACnC;aACJ;SACJ;;AAED,YAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;AACrC,gBAAI,CAAC,IAAI,GAAG;AACR,wBAAQ,EAAE,IAAI,CAAC,QAAQ;AACvB,wBAAQ,EAAE,IAAI,CAAC,QAAQ;AACvB,wBAAQ,EAAE,IAAI,CAAC,QAAQ;aAC1B,CAAC;SACL;;AAED,kBAAU,CAAC,KAAK,CAAC,IAAI,CAAC,6BAAmB,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC;KAClE,CAAC,CAAC;;AAEH,WAAO,UAAU,CAAC;CACrB;;;;;;;;;AAOM,SAAS,GAAG,CAAC,GAAG,EAAE;;AAErB,QAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AACzB,SAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAA,CAAE,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,CAAC;KACxE,MAAM;AACH,YAAI,WAAW,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACrC,SAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAA,CAAE,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC5E;CACJ","file":"index.js","sourcesContent":["const stackTrace = require('stack-trace');\nconst fs = require('fs');\nconst path = require('path');\nconst sourceMap = require('source-map');\nimport ParsedError from './ParsedError';\nimport StackTrace from './StackTrace';\nimport StackTraceItem from './StackTraceItem';\n\nlet sourceMapping;\n\n/**\n * Set path mapping, for instance when you have a vm or docker\n *\n * @param {String} currentPath\n * @param {String} sourcePath\n */\nexport function setPathMapping(currentPath, sourcePath) {\n    sourceMapping = Object.freeze({ current: currentPath, source: sourcePath });\n}\n\n/**\n * Parse an error and extract its stack trace\n *\n * @param  {Error} err\n * @return {ParsedError}\n */\nexport function parse(err) {\n    let parsedError = new ParsedError(err);\n    parsedError.stack = exports.parseErrorStack(err);\n\n    if (err.previous) {\n        parsedError.previous = parse(err.previous);\n    }\n\n    return parsedError;\n}\n\n/**\n * Parse an error and extract its stack trace\n *\n * @param  {Error} err\n * @return {StackTrace}\n */\nexport function parseErrorStack(err) {\n    let finalStack = new StackTrace();\n    let stack = stackTrace.parse(err);\n\n    const libFiles = new Map();\n    const sourceFiles = new Map();\n\n    stack.forEach((line) => {\n        const fileName = line.fileName;\n        let file;\n\n        if (fileName && fileName.startsWith('/')) {\n            if (libFiles.has(fileName)) {\n                file = libFiles.get(fileName);\n            } else {\n                file = {};\n                const dirname = path.dirname(fileName);\n                try {\n                    const fileContent = fs.readFileSync(fileName).toString();\n                    file.fileName = fileName;\n                    file.contents = fileContent;\n                    libFiles.set(fileName, file);\n\n                    try {\n                        let fileNameMap = fileName + '.map';\n                        const match = /\\/\\/[#@]\\s*sourceMappingURL=(.*)\\s*$/m.exec(fileContent);\n                        if (match && match[1] && match[1][0] === '/') {\n                            fileNameMap = path.resolve(dirname, match[1]);\n                        }\n\n                        const contents = fs.readFileSync(fileNameMap).toString();\n                        file.fileNameMap = fileNameMap;\n                        file.map = new sourceMap.SourceMapConsumer(contents);\n\n                        if (file.map.sourceRoot) {\n                            file.sourceRoot = path.resolve(dirname, file.map.sourceRoot);\n                        } else {\n                            file.sourceRoot = path.dirname(fileName);\n                        }\n                    } catch (e) {\n                    }\n                } catch (e) {\n                    libFiles.set(fileName, file = false);\n                }\n            }\n        }\n\n        if (file && file.map) {\n            const original = file.map.originalPositionFor({ line: line.lineNumber, column: line.columnNumber });\n            let originalFile;\n\n            if (original.source) {\n                const originalFilePath = path.resolve(file.sourceRoot, original.source);\n\n                if (sourceFiles.has(originalFilePath)) {\n                    originalFile = sourceFiles.get(originalFilePath);\n                } else {\n                    originalFile = { fileName: original.source, filePath: originalFilePath };\n                    sourceFiles.set(originalFilePath, originalFile);\n\n                    if (file.map.sourcesContent) {\n                        const sourceIndex = file.map.sources.indexOf(original.source);\n                        originalFile.contents = sourceIndex !== -1 && file.map.sourcesContent[sourceIndex];\n                    }\n\n                    if (!originalFile.contents) {\n                        Object.defineProperty(originalFile, 'contents', {\n                            configurable: true,\n                            get: function get() {\n                                let contents;\n                                try {\n                                    contents = fs.readFileSync(originalFilePath).toString();\n                                } catch (err) {\n                                }\n\n                                Object.defineProperty(originalFile, 'contents', { value: contents });\n                                return contents;\n                            },\n                        });\n                    }\n                }\n\n                line.compiledFileName = line.fileName;\n                line.compiledLineNumber = line.lineNumber;\n                line.compiledColumnNumber = line.columnNumber;\n\n                line.file = originalFile;\n                line.fileName = originalFile.filePath;\n                line.lineNumber = original.line;\n                line.columnNumber = original.column;\n                if (original.name) {\n                    line.methodName = original.name;\n                }\n            }\n        }\n\n        if (!line.file && file && file.contents) {\n            line.file = {\n                fileName: file.fileName,\n                filePath: file.fileName,\n                contents: file.contents,\n            };\n        }\n\n        finalStack.items.push(new StackTraceItem(line, sourceMapping));\n    });\n\n    return finalStack;\n}\n\n/**\n * Parse then log an error with logger.error\n *\n * @param {Error} err\n */\nexport function log(err) {\n    /* global logger */\n    if (typeof err !== 'object') {\n        (global.logger && logger.error || console.error)(err.message || err);\n    } else {\n        let parsedError = exports.parse(err);\n        (global.logger && logger.error || console.error)(parsedError.toString());\n    }\n}\n"]}