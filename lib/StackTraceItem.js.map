{"version":3,"sources":["../src/StackTraceItem.js"],"names":[],"mappings":";;;;;IAAqB,iBAAN,MAAM,cAAN,CAAqB;;;;;AAChC,gBAAY,IAAZ,EAAkB,aAAlB,EAAiC;AAC7B,aAAK,QAAL,GAAgB,KAAK,QAAL,CADa;AAE7B,aAAK,UAAL,GAAkB,KAAK,UAAL,CAFW;AAG7B,aAAK,YAAL,GAAoB,KAAK,YAAL,CAHS;AAI7B,aAAK,YAAL,GAAoB,KAAK,YAAL,CAJS;AAK7B,aAAK,QAAL,GAAgB,KAAK,QAAL,CALa;AAM7B,aAAK,UAAL,GAAkB,KAAK,UAAL,CANW;AAO7B,aAAK,MAAL,GAAc,KAAK,MAAL,CAPe;AAQ7B,aAAK,IAAL,GAAY,KAAK,IAAL,CARiB;;AAU7B,aAAK,gBAAL,GAAwB,KAAK,gBAAL,CAVK;AAW7B,aAAK,kBAAL,GAA0B,KAAK,kBAAL,CAXG;AAY7B,aAAK,oBAAL,GAA4B,KAAK,oBAAL,CAZC;;AAc7B,YAAI,iBAAiB,KAAK,QAAL,IAAiB,KAAK,QAAL,CAAc,UAAd,CAAyB,cAAc,OAAd,CAA3D,EAAmF;AACnF,iBAAK,YAAL,GAAoB,cAAc,MAAd,GACM,KAAK,QAAL,CAAc,MAAd,CAAqB,cAAc,OAAd,CAAsB,MAAtB,CAD3B,CAD+D;AAGnF,gBAAI,KAAK,gBAAL,EAAuB;AACvB,qBAAK,oBAAL,GAA4B,cAAc,MAAd,GACN,KAAK,QAAL,CAAc,MAAd,CAAqB,cAAc,OAAd,CAAsB,MAAtB,CADf,CADL;aAA3B;SAHJ,MAOO;AACH,iBAAK,YAAL,GAAoB,KAAK,QAAL,CADjB;AAEH,iBAAK,oBAAL,GAA4B,KAAK,gBAAL,CAFzB;SAPP;KAdJ;;AA2BA,kBAAc;AACV,eAAO,KAAK,QAAL,CADG;KAAd;;AAIA,oBAAgB;AACZ,eAAO,KAAK,IAAL,CADK;KAAhB;;AAIA,sBAAkB;AACd,eAAO,KAAK,MAAL,GAAc,CAAd,CADO;KAAlB;;AAIA,+BAA2B;AACvB,eAAO,KAAK,QAAL,CADgB;KAA3B;;;;MAIA,OAAO,GAAP,EAAY;AACR,YAAI,MAAM,SAAN,CADI;AAER,YAAI,KAAK,YAAL,EAAmB;AACnB,mBAAO,KAAK,YAAL,CADY;SAAvB,MAEO,IAAI,KAAK,QAAL,EAAe;AACtB,mBAAO,CAAC,GAAE,KAAK,QAAL,EAAc,CAAjB,GAAoB,KAAK,UAAL,IAAmB,aAAnB,EAAiC,CAA5D,CADsB;SAAnB;;AAIP,YAAI,KAAK,MAAL,EAAa;AACb,mBAAO,WAAP,CADa;SAAjB,MAEO;AACH,kBAAM,WAAW,CAAC,GAAE,KAAK,YAAL,EAAkB,CAArB,GAAwB,KAAK,UAAL,EAAgB,CAAxC,GAA2C,KAAK,YAAL,EAAkB,CAAxE,CADH;AAEH,mBAAO,CAAC,EAAD,GAAK,QAAL,EAAc,CAAd,CAAP,CAFG;;AAIH,gBAAI,KAAK,gBAAL,IAAyB,KAAK,gBAAL,KAA0B,KAAK,YAAL,EAAmB;AACtE,sBAAM,eAAe,CAAC,GAAE,KAAK,gBAAL,EAAsB,CAAzB,GAA4B,KAAK,kBAAL,EAAwB,CAApD,GAAuD,KAAK,oBAAL,EAA0B,CAAhG,CADgE;AAEtE,uBAAO,CAAC,YAAD,GAAe,YAAf,EAA4B,CAA5B,CAAP,CAFsE;aAA1E;SANJ;;AAYA,YAAI,GAAJ,EApBQ;KAAZ;CA5CW;kBAAM","file":"StackTraceItem.js","sourcesContent":["export default class StackTraceItem {\n    constructor(item, sourceMapping) {\n        this.fileName = item.fileName;\n        this.lineNumber = item.lineNumber;\n        this.columnNumber = item.columnNumber;\n        this.functionName = item.functionName;\n        this.typeName = item.typeName;\n        this.methodName = item.methodName;\n        this.native = item.native;\n        this.file = item.file;\n\n        this.compiledFileName = item.compiledFileName;\n        this.compiledLineNumber = item.compiledLineNumber;\n        this.compiledColumnNumber = item.compiledColumnNumber;\n\n        if (sourceMapping && item.fileName && item.fileName.startsWith(sourceMapping.current)) {\n            this.realFileName = sourceMapping.source\n                                    + item.fileName.substr(sourceMapping.current.length);\n            if (this.compiledFileName) {\n                this.realCompiledFileName = sourceMapping.source\n                                    + item.fileName.substr(sourceMapping.current.length);\n            }\n        } else {\n            this.realFileName = item.fileName;\n            this.realCompiledFileName = item.compiledFileName;\n        }\n    }\n\n    getFileName() {\n        return this.fileName;\n    }\n\n    getLineNumber() {\n        return this.line;\n    }\n\n    getColumnNumber() {\n        return this.column + 1;\n    }\n\n    getScriptNameOrSourceURL() {\n        return this.fileName;\n    }\n\n    render(log) {\n        let str = '    at ';\n        if (this.functionName) {\n            str += this.functionName;\n        } else if (this.typeName) {\n            str += `${this.typeName}.${this.methodName || '<anonymous>'}`;\n        }\n\n        if (this.native) {\n            str += ' [native]';\n        } else {\n            const fullPath = `${this.realFileName}:${this.lineNumber}:${this.columnNumber}`;\n            str += ` (${fullPath})`;\n\n            if (this.compiledFileName && this.compiledFileName !== this.realFileName) {\n                const compiledPath = `${this.compiledFileName}:${this.compiledLineNumber}:${this.compiledColumnNumber}`;\n                str += ` (compiled= ${compiledPath})`;\n            }\n        }\n\n        log(str);\n    }\n}\n"]}