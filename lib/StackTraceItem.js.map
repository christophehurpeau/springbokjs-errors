{"version":3,"sources":["../src/StackTraceItem.js"],"names":[],"mappings":"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","file":"StackTraceItem.js","sourcesContent":["export default class StackTraceItem {\n    constructor(item, sourceMapping) {\n        this.fileName = item.fileName;\n        this.lineNumber = item.lineNumber;\n        this.columnNumber = item.columnNumber;\n        this.functionName = item.functionName;\n        this.typeName = item.typeName;\n        this.methodName = item.methodName;\n        this.native = item.native;\n        this.file = item.file;\n\n        this.compiledFileName = item.compiledFileName;\n        this.compiledLineNumber = item.compiledLineNumber;\n        this.compiledColumnNumber = item.compiledColumnNumber;\n\n        if (sourceMapping && item.fileName && item.fileName.startsWith(sourceMapping.current)) {\n            this.realFileName = sourceMapping.source\n                                    + item.fileName.substr(sourceMapping.current.length);\n            if (this.compiledFileName) {\n                this.realCompiledFileName = sourceMapping.source\n                                    + item.fileName.substr(sourceMapping.current.length);\n            }\n        } else {\n            this.realFileName = item.fileName;\n            this.realCompiledFileName = item.compiledFileName;\n        }\n    }\n\n    getFileName() {\n        return this.fileName;\n    }\n\n    getLineNumber() {\n        return this.line;\n    }\n\n    getColumnNumber() {\n        return this.column + 1;\n    }\n\n    getScriptNameOrSourceURL() {\n        return this.fileName;\n    }\n\n    render(log) {\n        let str = '    at ';\n        if (this.functionName) {\n            str += this.functionName;\n        } else if (this.typeName) {\n            str += this.typeName + '.' + (this.methodName || '<anonymous>');\n        }\n\n        if (this.native) {\n            str += ' [native]';\n        } else {\n            const fullPath = this.realFileName + ':' + this.lineNumber + ':' + this.columnNumber;\n            str += ' (' + fullPath + ')';\n\n            if (this.compiledFileName && this.compiledFileName !== this.realFileName) {\n                const compiledPath = this.compiledFileName + ':' +\n                                     this.compiledLineNumber + ':' +\n                                     this.compiledColumnNumber;\n                str += ' (compiled= ' + compiledPath + ')';\n            }\n        }\n\n        log(str);\n    }\n}\n"]}