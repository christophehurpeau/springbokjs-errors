{"version":3,"sources":["../src/StackTraceItem.js"],"names":["StackTraceItem","item","sourceMapping","fileName","lineNumber","columnNumber","functionName","typeName","methodName","native","file","compiledFileName","compiledLineNumber","compiledColumnNumber","startsWith","current","realFileName","source","substr","length","realCompiledFileName","line","column","str","fullPath","compiledPath"],"mappings":";;;;IAAqBA,c;AACnB,0BAAYC,IAAZ,EAAkBC,aAAlB,EAAiC;AAAA;;AAC/B,SAAKC,QAAL,GAAgBF,KAAKE,QAArB;AACA,SAAKC,UAAL,GAAkBH,KAAKG,UAAvB;AACA,SAAKC,YAAL,GAAoBJ,KAAKI,YAAzB;AACA,SAAKC,YAAL,GAAoBL,KAAKK,YAAzB;AACA,SAAKC,QAAL,GAAgBN,KAAKM,QAArB;AACA,SAAKC,UAAL,GAAkBP,KAAKO,UAAvB;AACA,SAAKC,MAAL,GAAcR,KAAKQ,MAAnB;AACA,SAAKC,IAAL,GAAYT,KAAKS,IAAjB;;AAEA,SAAKC,gBAAL,GAAwBV,KAAKU,gBAA7B;AACA,SAAKC,kBAAL,GAA0BX,KAAKW,kBAA/B;AACA,SAAKC,oBAAL,GAA4BZ,KAAKY,oBAAjC;;AAEA,QAAIX,iBAAiBD,KAAKE,QAAtB,IAAkCF,KAAKE,QAAL,CAAcW,UAAd,CAAyBZ,cAAca,OAAvC,CAAtC,EAAuF;AACrF,WAAKC,YAAL,GAAoBd,cAAce,MAAd,GACYhB,KAAKE,QAAL,CAAce,MAAd,CAAqBhB,cAAca,OAAd,CAAsBI,MAA3C,CADhC;AAEA,UAAI,KAAKR,gBAAT,EAA2B;AACzB,aAAKS,oBAAL,GAA4BlB,cAAce,MAAd,GACEhB,KAAKE,QAAL,CAAce,MAAd,CAAqBhB,cAAca,OAAd,CAAsBI,MAA3C,CAD9B;AAED;AACF,KAPD,MAOO;AACL,WAAKH,YAAL,GAAoBf,KAAKE,QAAzB;AACA,WAAKiB,oBAAL,GAA4BnB,KAAKU,gBAAjC;AACD;AACF;;;;kCAEa;AACZ,aAAO,KAAKR,QAAZ;AACD;;;oCAEe;AACd,aAAO,KAAKkB,IAAZ;AACD;;;sCAEiB;AAChB,aAAO,KAAKC,MAAL,GAAc,CAArB;AACD;;;+CAE0B;AACzB,aAAO,KAAKnB,QAAZ;AACD;;;+BAEU;AACT,UAAIoB,MAAM,SAAV;AACA,UAAI,KAAKjB,YAAT,EAAuB;AACrBiB,eAAO,KAAKjB,YAAZ;AACD,OAFD,MAEO,IAAI,KAAKC,QAAT,EAAmB;AACxBgB,eAAU,KAAKhB,QAAf,UAA2B,KAAKC,UAAL,IAAmB,aAA9C;AACD;;AAED,UAAI,KAAKC,MAAT,EAAiB;AACfc,eAAO,WAAP;AACD,OAFD,MAEO;AACL,YAAMC,WAAc,KAAKR,YAAnB,SAAmC,KAAKZ,UAAxC,SAAsD,KAAKC,YAAjE;AACA,YAAI,KAAKC,YAAL,IAAqB,KAAKC,QAA9B,EAAwC;AACtCgB,wBAAYC,QAAZ;AACD,SAFD,MAEO;AACLD,iBAAOC,QAAP;AACD;;AAED,YAAI,KAAKb,gBAAL,IAAyB,KAAKA,gBAAL,KAA0B,KAAKK,YAA5D,EAA0E;AACxE,cAAMS,eACD,KAAKd,gBADJ,SACwB,KAAKC,kBAD7B,SACmD,KAAKC,oBAD9D;AAEAU,kCAAsBE,YAAtB;AACD;AACF;AACD,aAAOF,GAAP;AACD;;;;;;eArEkBvB,c","file":"StackTraceItem.js","sourcesContent":["export default class StackTraceItem {\n  constructor(item, sourceMapping) {\n    this.fileName = item.fileName;\n    this.lineNumber = item.lineNumber;\n    this.columnNumber = item.columnNumber;\n    this.functionName = item.functionName;\n    this.typeName = item.typeName;\n    this.methodName = item.methodName;\n    this.native = item.native;\n    this.file = item.file;\n\n    this.compiledFileName = item.compiledFileName;\n    this.compiledLineNumber = item.compiledLineNumber;\n    this.compiledColumnNumber = item.compiledColumnNumber;\n\n    if (sourceMapping && item.fileName && item.fileName.startsWith(sourceMapping.current)) {\n      this.realFileName = sourceMapping.source\n                                    + item.fileName.substr(sourceMapping.current.length);\n      if (this.compiledFileName) {\n        this.realCompiledFileName = sourceMapping.source\n                                    + item.fileName.substr(sourceMapping.current.length);\n      }\n    } else {\n      this.realFileName = item.fileName;\n      this.realCompiledFileName = item.compiledFileName;\n    }\n  }\n\n  getFileName() {\n    return this.fileName;\n  }\n\n  getLineNumber() {\n    return this.line;\n  }\n\n  getColumnNumber() {\n    return this.column + 1;\n  }\n\n  getScriptNameOrSourceURL() {\n    return this.fileName;\n  }\n\n  toString() {\n    let str = '    at ';\n    if (this.functionName) {\n      str += this.functionName;\n    } else if (this.typeName) {\n      str += `${this.typeName}.${this.methodName || '<anonymous>'}`;\n    }\n\n    if (this.native) {\n      str += ' [native]';\n    } else {\n      const fullPath = `${this.realFileName}:${this.lineNumber}:${this.columnNumber}`;\n      if (this.functionName || this.typeName) {\n        str += ` (${fullPath})`;\n      } else {\n        str += fullPath;\n      }\n\n      if (this.compiledFileName && this.compiledFileName !== this.realFileName) {\n        const compiledPath =\n          `${this.compiledFileName}:${this.compiledLineNumber}:${this.compiledColumnNumber}`;\n        str += ` (compiled= ${compiledPath})`;\n      }\n    }\n    return str;\n  }\n}\n"]}