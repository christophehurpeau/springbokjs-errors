{"version":3,"sources":["../src/HtmlRenderer.js"],"names":[],"mappings":"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","file":"HtmlRenderer.js","sourcesContent":["// jscs:disable maximumLineLength\n\nimport escape from 'escape-html';\nimport highlight from 'eshighlight-fb';\nimport { parseErrorStack } from './index';\nimport StackTrace from './StackTrace';\n\nexport default class HtmlRenderer {\n    constructor(options) {\n        this.options = Object.assign({\n            fileProtocol: 'file',\n        }, options);\n    }\n\n    /**\n     * @ignore\n     */\n    openLocalFile(filePath, lineNumber, columnNumber, realFilePath) {\n        if (this.openLocalFile.generatedPath && this.openLocalFile.sourcePath\n                     && filePath.startsWith(this.openLocalFile.generatedPath)) {\n            filePath = this.openLocalFile.sourcePath + filePath.substr(this.openLocalFile.generatedPath.length);\n        }\n\n        return `<a download href=\"${this.options.fileProtocol}://${escape(realFilePath || filePath)}`\n               + `${!lineNumber ? '' : `?${lineNumber}${!columnNumber ? '' : `:${columnNumber}`}`}\">`;\n    }\n\n    /**\n     * @ignore\n     */\n    replaceAppInFilePath(filePath) {\n        if (this.openLocalFile.generatedPath) {\n            filePath = `APP/${filePath.substr(this.openLocalFile.generatedPath.length)}`;\n        }\n\n        return filePath;\n    }\n\n    /**\n     * @ignore\n     */\n    render(error) {\n        let str = '<div style=\"text-align: left\">';\n        str += `<h4>${error.name}</h4>\\n`;\n        if (error.message) {\n            str += '<pre style=\"background:#FFF;color:#222;border:0;font-size:1em;white-space:pre-wrap;word-wrap:break-word\">';\n            str += escape(error.message);\n            str += '</pre>';\n        }\n\n        str += '<h5 style=\"background:#FFDDAA;color:#333;border:1px solid #E07308;padding:1px 2px;\">Call Stack:</h5>\\n';\n\n        if (!this.options.production) {\n            str += `<pre style=\"background:#FFF;color:#222;border:0\">${this.renderStack(error)}</pre>`;\n        }\n\n        return str;\n    }\n\n    /**\n     * @ignore\n     */\n    renderStack(error) {\n        let stackTrace = error.stackTrace instanceof StackTrace ? error.stackTrace : parseErrorStack(error);\n\n        let str = `<style>.string{ color: #EC7600; }\n.keyword, .null{ font-weight: bold; color: #93C763; }\n.numeric{ color: #FACD22; }\n.line-comment{ color: #66747B; }\n.identifier{ }\n.control-flow{ color: #93C763; }\n.azerty1{ color: #66747B; }\n.azerty2{ color: #678CB1; }\n.azerty5{ color: #F1F2F3; }\n.azerty6{ color: #8AC763; }\n.azerty7{ color: #E0E2E4; }\n.azerty9{ color: purple; }\n</style>`;\n        stackTrace.forEach((item, i) => {\n            if ((item.file && item.file.contents) || item.compiledFileName) {\n                str += '<span><a href=\"javascript:;\" style=\"color:#CC7A00;text-decoration:none;outline:none;\" '\n                        + 'onclick=\"var el=this.parentNode.nextElementSibling; el.style.display=el.style.display==\\'none\\'?\\'block\\':\\'none\\';\">';\n            }\n\n            str += `#${i} `;\n            if (item.fileName && item.fileName.startsWith('/')) {\n                str += this.openLocalFile(item.fileName, item.lineNumber, item.columnNumber, item.realFileName);\n            }\n\n            if (!item.native) {\n                str += this.replaceAppInFilePath(item.realFileName || item.fileName);\n                str += `:${item.lineNumber}:${item.columnNumber}`;\n            }\n\n            if (item.fileName) {\n                str += '</a> ';\n            }\n\n            if (item.functionName) {\n                str += item.functionName;\n            } else if (item.typeName) {\n                str += `${item.typeName}.${item.methodName || '<anonymous>'}`;\n            }\n\n            if (item.native) {\n                str += ' [native]';\n            }\n\n            if ((item.file && item.file.contents) || item.compiledFileName) {\n                str += '</a></span>';\n                str += '<div style=\"display:none\">';\n                if (item.compiledFileName) {\n                    str += '<div style=\"margin-top: 5px\">';\n                    str += '<b>Compiled path :</b><br />';\n                    if (item.realCompiledFileName && item.realCompiledFileName.startsWith('/')) {\n                        str += this.openLocalFile(item.compiledFileName, item.compiledLineNumber,\n                                item.compiledColumnNumber, item.realCompiledFileName);\n                    }\n\n                    str += this.replaceAppInFilePath(item.realCompiledFileName);\n                    str += `:${item.compiledLineNumber}:${item.compiledColumnNumber}`;\n                    if (item.realCompiledFileName && item.realCompiledFileName.startsWith('/')) {\n                        str += '</a>';\n                    }\n\n                    str += '</div>';\n                }\n\n                if (item.file && item.file.contents) {\n                    str += '<div style=\"margin-top: 5px\">';\n                    str += '<b>File content :</b><br />';\n                    str += this.highlightLine(item.file.contents, item.lineNumber, item.columnNumber);\n                    str += '</div>';\n                }\n\n                str += '</div>';\n            }\n\n            str += '\\n';\n        });\n\n        return str;\n    }\n\n    /**\n     * @ignore\n     */\n    highlightLine(contents, lineNumber /* , columnNumber */) {\n        let style = 'background:#3F1F1F;';\n        let withLineNumbers = true;\n        let minmax = 4;\n\n        let hcontents;\n        try {\n            hcontents = highlight(contents);\n        } catch (err) {\n            hcontents = escape(contents);\n        }\n\n        hcontents = hcontents.split(/\\r\\n|\\n\\r|\\n|\\r/);\n\n        let ok = lineNumber <= hcontents.length;\n        let firstLine;\n        let start;\n        let lineContent;\n        let end;\n\n        if (ok) {\n            firstLine = Math.max(0, minmax ? lineNumber - 1 - minmax : 0);\n            start = hcontents.slice(firstLine, lineNumber - 1);\n            lineContent = lineNumber === 0 ? '' : hcontents[lineNumber - 1];\n            end = hcontents.slice(lineNumber, lineNumber + minmax);\n        } else {\n            start = hcontents;\n        }\n\n        /* if (withLineNumbers) {\n            // $withLineNumbers = '%'.strlen((string)($ok ? $line+$minmax : $minmax+1)).'d';\n        } */\n\n        let content = this.lines(withLineNumbers, ok ? firstLine + 1 : 1, start);\n        if (ok) {\n            let attributes = { style: style };\n            content += this.line(withLineNumbers, lineNumber, attributes, lineContent);\n            content += this.lines(withLineNumbers, lineNumber + 1, end);\n        }\n\n        let preAttrs = { style: 'background:#0F0F0F;color:#E0E2E4;border:0;padding:0;position:relative;' };\n        return this.tag('pre', preAttrs, content, false);\n    }\n\n    /**\n     * @ignore\n     */\n    lines(withLineNumbers, startNumber, _lines) {\n        let content = '';\n        _lines.forEach((line) => {\n            content += this.line(withLineNumbers, startNumber++, {}, line);\n        });\n        return content;\n    }\n\n    /**\n     * @ignore\n     */\n    line(withLineNumbers, lineNumber, attributes, contentLine) {\n        attributes.style = `${attributes.style || ''}white-space:pre-wrap;`\n            + `${withLineNumbers ? 'padding-left:20px;' : ''}`;\n\n        if (withLineNumbers) {\n            contentLine = '<i style=\"color:#AAA;font-size:7pt;position:absolute;left:1px;padding-top:1px;\">'\n                            + `${lineNumber}</i>${contentLine}`;\n        }\n\n        return this.tag('div', attributes, contentLine);\n    }\n\n    /**\n     * @ignore\n     */\n    tag(tagName, attributes, content, contentEscape) {\n        attributes = attributes || {};\n        let str = '';\n        Object.keys(attributes).forEach(key => {\n            str += ` ${key}`;\n            if (attributes[key]) {\n                str += `=\"${attributes[key] === true ? key : escape(attributes[key])}\"`;\n            }\n        });\n\n        return `<${tagName}${str}${content == null ? '/' :\n                    `>${contentEscape ? escape(content) : content}</${tagName}`}>`;\n    }\n}\n"]}